version: "3"

services:
  frontend_production:
    container_name: frontend_production_${IMAGE_TAG}
    image: frontend_production_${IMAGE_TAG}
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        PORT: ${FRONTEND_CONTAINER_PORT}
    ports:
      - ${FRONTEND_PORT}:80 
    environment:
      NODE_ENV: production
    depends_on:
      - backend_production_${IMAGE_TAG}
    networks:
      - frontend

  backend_production:
    container_name: backend_production_${IMAGE_TAG}
    image: backend_production_${IMAGE_TAG}
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        PORT:                 ${BACKEND_CONTAINER_PORT}
        ACCESS_TOKEN_SECRET:  ${ACCESS_TOKEN_SECRET}
        REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
        PG_USER:              ${APP_USER}
        PG_PASSWORD:          ${APP_PASSWORD}
        PG_DATABASE:          ${APP_DATABASE}
        PG_HOST:              'database_production'
        PG_PORT:              ${DATABASE_PORT}
    ports:
      - ${BACKEND_PORT}:${BACKEND_CONTAINER_PORT}
    environment:
      NODE_ENV: production
    depends_on:
      - database_production_${IMAGE_TAG}
    networks:
      - frontend
      - backend

  database_production:
    container_name: database_production_${IMAGE_TAG}
    image: database_production_${IMAGE_TAG}
    build: 
      context: ./database
      dockerfile: Dockerfile
      args:
        POSTGRES_USER:     ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DATABASE: ${POSTGRES_DATABASE}
        APP_USER:          ${APP_USER}
        APP_PASSWORD:      ${APP_PASSWORD}
        APP_DATABASE:      ${APP_DATABASE}
    ports:
      - ${DATABASE_PORT}:${DATABASE_CONTAINER_PORT}
    networks:
      - backend

networks:
  backend:
  frontend: